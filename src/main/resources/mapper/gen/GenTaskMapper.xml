<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wkclz.generate.dao.GenTaskMapper">

  <!-- baseColumns 字段集 -->
  <sql id="baseColumns">
    <trim suffixOverrides=",">
      id,
      user_id,
      project_id,
      temp_id,
      task_name,
      need_create,
      need_delete,
      project_base_path,
      package_path,
      task_desc,
      sort,
      create_time,
      create_by,
      update_time,
      update_by,
      comments,
      version,
      status,
    </trim>
  </sql>

  <!-- selectiveColumns -->
  <sql id="selectiveColumns">
    <trim suffixOverrides=",">
	  <if test="id != null">id, </if>
	  <if test="userId != null">user_id, </if>
	  <if test="projectId != null">project_id, </if>
	  <if test="tempId != null">temp_id, </if>
	  <if test="taskName != null">task_name, </if>
	  <if test="needCreate != null">need_create, </if>
	  <if test="needDelete != null">need_delete, </if>
	  <if test="projectBasePath != null">project_base_path, </if>
	  <if test="packagePath != null">package_path, </if>
	  <if test="taskDesc != null">task_desc, </if>
	  <if test="sort != null">sort, </if>
	  <if test="createTime != null">create_time, </if>
	  <if test="createBy != null">create_by, </if>
	  <if test="updateTime != null">update_time, </if>
	  <if test="updateBy != null">update_by, </if>
	  <if test="comments != null">comments, </if>
	  <if test="version != null">version, </if>
	  <if test="status != null">status, </if>
	</trim>
  </sql>

  <!-- selectiveSets -->
  <sql id="selectiveSets">
    <trim suffixOverrides=",">
	  <if test="id != null">id = #{id}, </if>
	  <if test="userId != null">user_id = #{userId}, </if>
	  <if test="projectId != null">project_id = #{projectId}, </if>
	  <if test="tempId != null">temp_id = #{tempId}, </if>
	  <if test="taskName != null">task_name = #{taskName}, </if>
	  <if test="needCreate != null">need_create = #{needCreate}, </if>
	  <if test="needDelete != null">need_delete = #{needDelete}, </if>
	  <if test="projectBasePath != null">project_base_path = #{projectBasePath}, </if>
	  <if test="packagePath != null">package_path = #{packagePath}, </if>
	  <if test="taskDesc != null">task_desc = #{taskDesc}, </if>
	  <if test="sort != null">sort = #{sort}, </if>
	  <if test="createTime != null">create_time = #{createTime}, </if>
	  <if test="createBy != null">create_by = #{createBy}, </if>
	  <if test="updateTime != null">update_time = #{updateTime}, </if>
	  <if test="updateBy != null">update_by = #{updateBy}, </if>
	  <if test="comments != null">comments = #{comments}, </if>
	  <if test="version != null">version = version +1, </if>
	  <if test="status != null">status = #{status}, </if>
	</trim>
  </sql>

   <!-- selectiveValues -->
  <sql id="selectiveValues">
    <trim suffixOverrides=",">
	  <if test="id != null">#{id}, </if>
	  <if test="userId != null">#{userId}, </if>
	  <if test="projectId != null">#{projectId}, </if>
	  <if test="tempId != null">#{tempId}, </if>
	  <if test="taskName != null">#{taskName}, </if>
	  <if test="needCreate != null">#{needCreate}, </if>
	  <if test="needDelete != null">#{needDelete}, </if>
	  <if test="projectBasePath != null">#{projectBasePath}, </if>
	  <if test="packagePath != null">#{packagePath}, </if>
	  <if test="taskDesc != null">#{taskDesc}, </if>
	  <if test="sort != null">#{sort}, </if>
	  <if test="createTime != null">#{createTime}, </if>
	  <if test="createBy != null">#{createBy}, </if>
	  <if test="updateTime != null">#{updateTime}, </if>
	  <if test="updateBy != null">#{updateBy}, </if>
	  <if test="comments != null">#{comments}, </if>
	  <if test="version != null">#{version}, </if>
	  <if test="status != null">#{status}, </if>
	</trim>
  </sql>

  <!-- allColumns -->
  <sql id="allColumns">
    <trim suffixOverrides=",">
      id,
      user_id,
      project_id,
      temp_id,
      task_name,
      need_create,
      need_delete,
      project_base_path,
      package_path,
      task_desc,
      sort,
      create_time,
      create_by,
      update_time,
      update_by,
      comments,
      version,
      status,
    </trim>
  </sql>

  <!-- where 条件集 -->
  <sql id="where">
    WHERE
      status = 1
      <if test="ids != null and ids.size > 0">AND id IN ( <foreach collection="ids" item="item" separator=","> #{item} </foreach> ) </if>
      <if test="timeFrom != null">AND create_time &gt;= #{timeFrom} </if>
      <if test="timeTo != null">AND create_time &lt;= #{timeTo} </if>
      <if test="id != null">AND id = #{id} </if>
      <if test="userId != null">AND user_id = #{userId} </if>
      <if test="projectId != null">AND project_id = #{projectId} </if>
      <if test="tempId != null">AND temp_id = #{tempId} </if>
      <if test="taskName != null">AND task_name = #{taskName} </if>
      <if test="needCreate != null">AND need_create = #{needCreate} </if>
      <if test="needDelete != null">AND need_delete = #{needDelete} </if>
      <if test="projectBasePath != null">AND project_base_path = #{projectBasePath} </if>
      <if test="packagePath != null">AND package_path = #{packagePath} </if>
      <if test="taskDesc != null">AND task_desc = #{taskDesc} </if>
      <if test="sort != null">AND sort = #{sort} </if>
      <if test="createTime != null">AND create_time = #{createTime} </if>
      <if test="createBy != null">AND create_by = #{createBy} </if>
      <if test="updateTime != null">AND update_time = #{updateTime} </if>
      <if test="updateBy != null">AND update_by = #{updateBy} </if>
      <if test="comments != null">AND comments = #{comments} </if>
      <if test="version != null">AND version = #{version} </if>
  </sql>

  <!-- count 统计 -->
  <select id="count" parameterType="com.wkclz.generate.pojo.entity.GenTask" resultType="java.lang.Integer">
    SELECT
      count(*) count
    FROM
      gen_task
    <include refid="where"/>
  </select>

  <!-- getById 主键查询 -->
  <select id="getById" parameterType="java.lang.Long" resultType="com.wkclz.generate.pojo.entity.GenTask">
    SELECT
      <include refid="allColumns"/>
    FROM
      gen_task
    WHERE
     id = #{id}
     AND status = 1
  </select>

  <!-- getByEntity 模型查询，要求唯一 -->
  <select id="getByEntity" parameterType="com.wkclz.generate.pojo.entity.GenTask" resultType="com.wkclz.generate.pojo.entity.GenTask">
    SELECT
      <include refid="allColumns"/>
    FROM
      gen_task
    <include refid="where"/>
    LIMIT 1
  </select>

  <!-- list 列表查询,不包含Blob -->
  <select id="list" parameterType="com.wkclz.generate.pojo.entity.GenTask" resultType="com.wkclz.generate.pojo.entity.GenTask">
    SELECT
      <include refid="baseColumns"/>
    FROM
      gen_task
    <include refid="where"/>
	<if test="orderBy != null">
	  ORDER BY
        ${orderBy}
	</if>
	<if test="pageSize != null and offset != null">
	  LIMIT
	    #{offset}, #{pageSize}
	</if>
  </select>

  <!-- insert (选择性)插入 -->
  <insert id="insert" parameterType="com.wkclz.generate.pojo.entity.GenTask">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO gen_task (
      <include refid="selectiveColumns"/>
	) VALUES (
      <include refid="selectiveValues"/>
	)
  </insert>
  
  <!-- insertBatch 全量批量插入 -->
  <insert id="insertBatch" parameterType="java.util.List">
    INSERT INTO gen_task (
      <trim suffixOverrides=",">
        user_id,
        project_id,
        temp_id,
        task_name,
        need_create,
        need_delete,
        project_base_path,
        package_path,
        task_desc,
        sort,
        create_by,
        update_by,
        comments,
      </trim>
    ) VALUES
      <foreach collection="list" item="item" separator=",">
        <trim prefix="(" suffix=")" suffixOverrides=",">
		  #{item.userId},
		  #{item.projectId},
		  #{item.tempId},
		  #{item.taskName},
		  #{item.needCreate},
		  #{item.needDelete},
		  #{item.projectBasePath},
		  #{item.packagePath},
		  #{item.taskDesc},
		  #{item.sort},
		  #{item.createBy},
		  #{item.updateBy},
		  #{item.comments},
		</trim>
      </foreach>
  </insert>

  <!-- updateAll 更新(带乐观锁) -->
  <update id="updateAll" parameterType="com.wkclz.generate.pojo.entity.GenTask">
    UPDATE
      gen_task
    SET
      <trim suffixOverrides=",">
        id = #{id},
        user_id = #{userId},
        project_id = #{projectId},
        temp_id = #{tempId},
        task_name = #{taskName},
        need_create = #{needCreate},
        need_delete = #{needDelete},
        project_base_path = #{projectBasePath},
        package_path = #{packagePath},
        task_desc = #{taskDesc},
        sort = #{sort},
        create_by = #{createBy},
        update_by = #{updateBy},
        comments = #{comments},
        version = version +1,
      </trim>
    WHERE
      id = #{id}
      AND version = #{version}
  </update>

  <!-- updateSelective 选择性更新(带乐观锁) -->
  <update id="updateSelective" parameterType="com.wkclz.generate.pojo.entity.GenTask">
    UPDATE
      gen_task
    SET
      <include refid="selectiveSets"/>
    WHERE
      id = #{id}
      AND version = #{version}
  </update>

  <!-- updateSelectiveWithoutLock 选择性更新(不带乐观锁) -->
  <update id="updateSelectiveWithoutLock" parameterType="com.wkclz.generate.pojo.entity.GenTask">
    UPDATE
      gen_task
    SET
      <include refid="selectiveSets"/>
    WHERE
      id = #{id}
  </update>

  <!-- updateBatch 批量更新(不带乐观锁) -->
  <update id="updateBatch" parameterType="com.wkclz.generate.pojo.entity.GenTask">
    UPDATE gen_task
    SET
      version = version + 1,
      <trim suffixOverrides=",">
        id = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.id} </foreach> END,
        user_id = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.userId} </foreach> END,
        project_id = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.projectId} </foreach> END,
        temp_id = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.tempId} </foreach> END,
        task_name = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.taskName} </foreach> END,
        need_create = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.needCreate} </foreach> END,
        need_delete = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.needDelete} </foreach> END,
        project_base_path = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.projectBasePath} </foreach> END,
        package_path = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.packagePath} </foreach> END,
        task_desc = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.taskDesc} </foreach> END,
        sort = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.sort} </foreach> END,
        create_by = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.createBy} </foreach> END,
        update_by = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.updateBy} </foreach> END,
        comments = CASE id <foreach collection="list" item="item">WHEN #{item.id} THEN #{item.comments} </foreach> END,
      </trim>
    WHERE
      status = 1
      AND id IN ( <foreach collection="list" item="item" separator=",">#{item.id}</foreach> )
  </update>

  <!-- delete (逻辑)删除 -->
  <update id="delete" parameterType="com.wkclz.generate.pojo.entity.GenTask">
    UPDATE gen_task
    SET
      status = 0,
      version = version + 1,
      update_by = #{updateBy}
    WHERE
      status = 1
      <if test="id != null">
        AND id = #{id}
      </if>
      <if test="ids != null and ids.size > 0">
        AND id IN ( <foreach collection="ids" item="item" separator=",">#{item}</foreach> )
      </if>
  </update>

</mapper>

